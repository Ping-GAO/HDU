#include <iostream>
#include <cstdlib>
#include <queue>

using namespace std;
struct node{
	int i;
	int j;
	int cost;
	int distance;
	node *pre; 
	node *next;
};
bool operator <(const node& a,const node& b){
    return a.distance > b.distance;
};
void print_path(node* end);
node matrix[100][100];
void print_matrix(int N,int M);
void print_distance(int N,int M);
// a global varible to record time
int sec;
int main(){
	int N,M;
	while(cin>>N>>M){
		sec = 1;
		int i,j;
		char temp;
		for(i=0;i<N;i++){
			for(j=0;j<M;j++){
				cin>>temp;
				if(temp=='X'){
					// can't breach
					matrix[i][j].cost=-1;
				}
				else if(temp=='.'){
					matrix[i][j].cost=1;
				}
				else{
					matrix[i][j].cost=atoi(&temp) + 1;
				}
				matrix[i][j].i=i;
				matrix[i][j].j=j;
				matrix[i][j].distance = 999;
			}
		}
		//print_matrix(N,M);
		priority_queue<node> q;
		// monster at start position
		
		if(matrix[0][0].cost >1){
			matrix[0][0].distance = matrix[0][0].cost-1;
		}
		else{
			matrix[0][0].distance = 0;
		}
		q.push(matrix[0][0]);
		while(!q.empty()){
			node temp = q.top();
			q.pop();
			int a = temp.i;
			int b = temp.j;
			int c,d;
			for(c=-1;c<=1;c++){
				for(d=-1;d<=1;d++){
					if(c*d != 0){
						continue;
					}
					if(a+c<0||a+c>N-1||b+d<0||b+d>M-1){
						continue;
					}
					if(matrix[a+c][b+d].cost==-1){
						continue;
					}
					if(matrix[a+c][b+d].distance > matrix[a][b].distance + matrix[a+c][b+d].cost){
						matrix[a+c][b+d].distance = matrix[a][b].distance + matrix[a+c][b+d].cost;
						q.push(	matrix[a+c][b+d]);
						matrix[a+c][b+d].pre = &matrix[a][b];
					}
				}
			}		
		}
		// update next link
		// trick leaned in revrse linklist
		node *temp3 = NULL;
		node *temp4 = &matrix[N-1][M-1];
		while(temp4!=NULL){
			temp4->next = temp3;
			temp3 = temp4;
			temp4 = temp4->pre;
		} 
	
		
		// cout<<"final"<<matrix[N-1][M-1].distance<<endl;
		// print_distance(N,M);
		
	
		if(matrix[N-1][M-1].distance == 999){
			cout<<"God please help our poor hero."<<endl;
		}
		else{
			node * temp2 =  matrix[N-1][M-1].pre;
			cout<<"It takes "<< matrix[N-1][M-1].distance<<" seconds to reach the target position, let me show you the way."<<endl ;
		
			
			if(matrix[0][0].cost>1){
				int i;
				node *end = &matrix[0][0];
				for(i=1;i<(*end).cost;i++){
					cout<<sec<<"s:FIGHT AT "<<"("<<(*(*end).next).i<<","<<(*(*end).next).j<<")"<<endl;
					sec++;
				}
			}
			print_path(temp2);
		}
		cout<<"FINISH"<<endl;
		
		
		
		
		
		
		
	} 
	return 0;
}

void print_matrix(int N,int M){
	int i,j;
	for(i=0;i<N;i++){
		for(j=0;j<M;j++){
			cout<<matrix[i][j].cost;		
		}
		cout<<endl;
	}
}

void print_distance(int N,int M){
	int i,j;
	for(i=0;i<N;i++){
		for(j=0;j<M;j++){
			cout<<matrix[i][j].distance<<"("<<i<<j<<")"<<'\t';		
		}
		cout<<endl;
	}
}

void print_path(node* end){
	if(end == NULL){
		return;
	}
	print_path((*end).pre);
	// recussion
	//cout<<(*(*end).next).cost<<endl;
	cout<<sec<<"s:"<<"("<<(*end).i<<","<<(*end).j<<")"<<"->"<<"("<<(*(*end).next).i<<","<<(*(*end).next).j<<")"<<endl;
	sec++;
	if((*(*end).next).cost>1){
		int i;
		for(i=1;i<(*(*end).next).cost;i++){
			cout<<sec<<"s:FIGHT AT "<<"("<<(*(*end).next).i<<","<<(*(*end).next).j<<")"<<endl;
			sec++;
		}
	}
	
	return;
} 
